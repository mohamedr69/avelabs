import sys,os
import xml.etree.ElementTree as ET
import traceback

__all__ = ['GenCanIf']

__Header = \
"""/*
* Configuration of module: CanIf
*
* Created by:   parai          
* Copyright:    (C)parai@foxmail.com  
*
* Configured for (MCU):    MinGW ...
*
* Module vendor:           ArcCore
* Generator version:       2.0.34
*
* Generated by easySAR Studio (https://github.com/parai/OpenSAR)
*/
"""

__dir = '.'
__root = None

def tInt(strnum):
    if(strnum.find('0x')!=-1 or strnum.find('0X')!=-1):
        return int(strnum,16)
    else:
        return int(strnum,10)
    
def GenCanIf(wfxml):
    global __dir,__root
    __root = ET.parse(wfxml).getroot();
    __dir = os.path.dirname(wfxml)
    GenH()
    GenC()
    
def GAGet(what,which):
    # what must be a pdu = [ Name, Id, Bus]
    if(which == 'name'):
        return what[0]
    elif(which == 'id'):
        return hex(tInt(what[1]))
    elif(which == 'bus'):
        return what[2]

def GLGet(what):
    """ Gen Get List
        Get A Special List []
    """
    global __root
    import re
    # (Type=RX/TX ) (Name) (Id)
    reMsg = re.compile(r'(\w+)\s*=\s*(\w+)\s*\(\s*(\w+)\s*\)')
    rlist =[]
    if(what == 'TxPdu'):
        for Signal in __root.find('SignalList'):
            msg = Signal.attrib['msg']
            try:
                msg = reMsg.search(msg).groups()
                if(msg[0] == 'TX'):
                   flag = False
                   for pdu in rlist:
                       # If has same Id and Bus
                       if(msg[2] == pdu[1] and Signal.attrib['bus'] == pdu[2]):
                           if(msg[1]) != pdu[0]:
                               raise Exception('Name must be the same if the message has the same Id on the same Bus.')
                           flag = True
                   if(False == flag):
                       pdu = []
                       pdu.append(msg[1])
                       pdu.append(msg[2])
                       pdu.append(Signal.attrib['bus'])
                       rlist.append(pdu)
            except:
                print traceback.format_exc()
                print 'CanIf: Error Message Configured for %s'%(Signal.attrib['name'])
    elif(what == 'RxPdu'):
        for Signal in __root.find('SignalList'):
            msg = Signal.attrib['msg']
            try:
                msg = reMsg.search(msg).groups()
                if(msg[0] == 'RX'):
                   flag = False
                   for pdu in rlist:
                       if(msg[2] == pdu[1] and Signal.attrib['bus'] == pdu[2]):
                           if(msg[1]) != pdu[0]:
                               raise Exception('Name must be the same if the message has the same Id on the same Bus.')
                           flag = True
                   if(False == flag):
                       pdu = []
                       pdu.append(msg[1])
                       pdu.append(msg[2])
                       pdu.append(Signal.attrib['bus'])
                       rlist.append(pdu)
            except:
                print traceback.format_exc()
                print 'CanIf: Error Message Configured for %s'%(Signal.attrib['name'])
    return rlist
def GenH():
    global __dir
    fp = open('%s/CanIf_Cfg.h'%(__dir),'w')
    fp.write(__Header)
    fp.write("""
#ifndef CANIF_CFG_H_
#define CANIF_CFG_H_

#include "Can.h"

#define CANIF_VERSION_INFO_API   STD_OFF

#if defined(USE_DET)
#define CANIF_DEV_ERROR_DETECT   STD_ON
#else
#define CANIF_DEV_ERROR_DETECT   STD_OFF
#endif
#define CANIF_DLC_CHECK          STD_OFF
#define CANIF_MULITPLE_DRIVER_SUPPORT       STD_OFF   // Not supported
#define CANIF_READRXPDU_DATA_API             STD_OFF   // Not supported
#define CANIF_READRXPDU_NOTIFY_STATUS_API     STD_OFF   // Not supported
#define CANIF_READTXPDU_NOTIFY_STATUS_API     STD_OFF   // Not supported
#define CANIF_SETDYNAMICTXID_API            STD_OFF   // Not supported
#define CANIF_WAKEUP_EVENT_API                 STD_OFF   // Not supported
#define CANIF_TRANSCEIVER_API               STD_OFF   // Not supported
#define CANIF_TRANSMIT_CANCELLATION         STD_OFF   // Not supported
#define CANIF_ARC_RUNTIME_PDU_CONFIGURATION STD_OFF   // Not supported
#define CANIF_CANPDUID_READDATA_API         STD_OFF   // Not supported
#define CANIF_READRXPDU_NOTIF_STATUS_API    STD_OFF   // Not supported
    """)
    ### I am lasy, by default I configure out two UDS server, Id unchangeable
    fp.write("""
/* Tx PduId For CanIF */
#define CANIF_DIAG_P2P_ACK        0
#define CANIF_DIAG_P2A_ACK        1
#define CANIF_LS_NM_TX            2
#define CANIF_HS_NM_TX            3
/* Rx PduId For CanIF */
#define CANIF_DIAG_P2P_REQ        0
#define CANIF_DIAG_P2A_REQ        1
#define CANIF_LS_NM_RX            2
#define CANIF_HS_NM_RX            3
    \n""")
    fp.write('// ---- Gen Helper ----\n')
    fp.write('#define GenCanIfRxId(id) (id+4)\n')
    fp.write('#define GenCanIfTxId(id) (id+4)\n\n')
    startId = 0     
    for pdu in GLGet('RxPdu'):
        fp.write('#define CANIF_%s_RX GenCanIfRxId(%s)\n'%(GAGet(pdu,'name'),startId))
        startId += 1
    startId = 0     
    for pdu in GLGet('TxPdu'):
        fp.write('#define CANIF_%s_TX GenCanIfTxId(%s)\n'%(GAGet(pdu,'name'),startId))
        startId += 1
    fp.write("""
// Identifiers for the elements in CanIfControllerConfig[]
// This is the ConfigurationIndex in CanIf_InitController()
typedef enum {
    CANIF_CHL_LS_CONFIG_0,
    CANIF_CHL_HS_CONFIG_0,
    CANIF_CHANNEL_CONFIGURATION_CNT
}CanIf_Arc_ConfigurationIndexType;

typedef enum {
    CANIF_CHL_LS,  // Low  Speed CanIf Channel map to CAN_CTRL_0
    CANIF_CHL_HS,  // High Speed CanIf Channel map to CAN_CTRL_1
    CANIF_CHANNEL_CNT
}CanIf_Arc_ChannelIdType;

#include "CanIf_ConfigTypes.h"

extern const CanIf_ConfigType CanIf_Config; 

#endif   
    \n""")
    fp.close()
    
def GenC():   
    global __dir
    fp = open('%s/CanIf_Cfg.c'%(__dir),'w')
    fp.write(__Header)
    fp.write("""
#include "CanIf.h"
//#if defined(USE_CANTP)
#include "CanTp.h"
#include "CanTp_Cbk.h"
//#endif
#if defined(USE_J1939TP)
#include "J1939Tp.h"
#include "J1939Tp_Cbk.h"
#endif
//#if defined(USE_PDUR)
#include "PduR.h"
//#endif
#if defined(USE_CANNM)
#include "CanNm_Cbk.h"
#endif
//#include <stdlib.h>

// Imported structs from Can_PBcfg.c
extern const Can_ControllerConfigType Can_ControllerCfgData[];
extern const Can_ConfigSetType Can_ConfigSetData;

// Contains the mapping from CanIf-specific Channels to Can Controllers
const CanControllerIdType CanIf_Arc_ChannelToControllerMap[CANIF_CHANNEL_CNT] = {
    CAN_CTRL_0,    //CANIF_CHL_LS
    CAN_CTRL_1,    //CANIF_CHL_HS
};

const uint8 CanIf_Arc_ChannelDefaultConfIndex[CANIF_CHANNEL_CNT] = {
    CANIF_CHL_LS_CONFIG_0,
    CANIF_CHL_HS_CONFIG_0,
};

// Container that gets slamed into CanIf_InitController()
// Inits ALL controllers
// Multiplicity 1..*
const CanIf_ControllerConfigType CanIfControllerConfig[] = {
    // This is the ConfigurationIndex in CanIf_InitController()
    {
        .WakeupSupport = CANIF_WAKEUP_SUPPORT_NO_WAKEUP,
        .CanIfControllerIdRef = CANIF_CHL_LS,
        .CanIfDriverNameRef = "FLEXCAN",  // Not used
        .CanIfInitControllerRef = &Can_ControllerCfgData[INDEX_OF_CAN_CTRL_0],
    },
    {
        .WakeupSupport = CANIF_WAKEUP_SUPPORT_NO_WAKEUP,
        .CanIfControllerIdRef = CANIF_CHL_HS,
        .CanIfDriverNameRef = "FLEXCAN",  // Not used
        .CanIfInitControllerRef = &Can_ControllerCfgData[INDEX_OF_CAN_CTRL_1],
    },
};

// Function callbacks for higher layers
const CanIf_DispatchConfigType CanIfDispatchConfig =
{
    .CanIfBusOffNotification = NULL,
    .CanIfWakeUpNotification = NULL,        // Not used
    .CanIfWakeupValidNotification = NULL,   // Not used
    .CanIfErrorNotificaton = NULL,
};

// Data for init configuration CanIfInitConfiguration

const CanIf_HthConfigType CanIfHthConfigData_CANIF_CHL_LS[]=
{
    {
        .CanIfHthType = CAN_ARC_HANDLE_TYPE_BASIC,
        .CanIfCanControllerIdRef = CANIF_CHL_LS,
        .CanIfHthIdSymRef = CAN_CTRL_0_HTH,
        .CanIf_Arc_EOL = TRUE
    },
};

const CanIf_HrhConfigType CanIfHrhConfigData_CANIF_CHL_LS[]=
{
    {
        .CanIfHrhType = CAN_ARC_HANDLE_TYPE_BASIC,
        .CanIfSoftwareFilterHrh = TRUE, // Must Be True
        .CanIfCanControllerHrhIdRef = CANIF_CHL_LS,
        .CanIfHrhIdSymRef = CAN_CTRL_0_HRH,
        .CanIfHrhRangeConfig = NULL,
        .CanIf_Arc_EOL = TRUE
    },
};

const CanIf_HthConfigType CanIfHthConfigData_CANIF_CHL_HS[]=
{
    {
        .CanIfHthType = CAN_ARC_HANDLE_TYPE_BASIC,
        .CanIfCanControllerIdRef = CANIF_CHL_HS,
        .CanIfHthIdSymRef = CAN_CTRL_1_HTH,
        .CanIf_Arc_EOL = TRUE
    },
};

const CanIf_HrhConfigType CanIfHrhConfigData_CANIF_CHL_HS[]=
{
    {
        .CanIfHrhType = CAN_ARC_HANDLE_TYPE_BASIC,
        .CanIfSoftwareFilterHrh = TRUE,    // Must Be True
        .CanIfCanControllerHrhIdRef = CANIF_CHL_HS,
        .CanIfHrhIdSymRef = CAN_CTRL_1_HRH,
        .CanIfHrhRangeConfig = NULL,
        .CanIf_Arc_EOL = TRUE
    },
};

const CanIf_InitHohConfigType CanIfHohConfigData[] =
{
    {
        .CanConfigSet = &Can_ConfigSetData,
        .CanIfHrhConfig = CanIfHrhConfigData_CANIF_CHL_LS,
        .CanIfHthConfig = CanIfHthConfigData_CANIF_CHL_LS,
        .CanIf_Arc_EOL = FALSE
    },
    {
        .CanConfigSet = &Can_ConfigSetData,
        .CanIfHrhConfig = CanIfHrhConfigData_CANIF_CHL_HS,
        .CanIfHthConfig = CanIfHthConfigData_CANIF_CHL_HS,
        .CanIf_Arc_EOL = TRUE
    },
};
    \n""")
    ## Tx PDU ID
    cstr =''
    for pdu in GLGet('TxPdu'):
        cstr += """
    {
        .CanIfTxPduId = PDUR_%s_TX,
        .CanIfCanTxPduIdCanId = %s, 
        .CanIfCanTxPduIdDlc = 8,
        .CanIfCanTxPduType = CANIF_PDU_TYPE_STATIC,
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadTxPduNotifyStatus = FALSE,
#endif
        .CanIfTxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfUserTxConfirmation = PduR_CanIfTxConfirmation,
        .CanIfCanTxPduHthRef = &CanIfHthConfigData_%s[0],
        .PduIdRef = NULL
    },\n"""%(GAGet(pdu,'name'),GAGet(pdu,'id'),GAGet(pdu,'bus'),)
    fp.write("""
const CanIf_TxPduConfigType CanIfTxPduConfigData[] = 
{
    {
        .CanIfTxPduId = CANTP_DIAG_P2P_ACK,
        .CanIfCanTxPduIdCanId = 0x732, // DiagP2P
        .CanIfCanTxPduIdDlc = 8,
        .CanIfCanTxPduType = CANIF_PDU_TYPE_STATIC,
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadTxPduNotifyStatus = FALSE,
#endif
        .CanIfTxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfUserTxConfirmation = CanTp_TxConfirmation,
        .CanIfCanTxPduHthRef = &CanIfHthConfigData_CANIF_CHL_LS[0],
        .PduIdRef = NULL
    },
    {
        .CanIfTxPduId = CANTP_DIAG_P2A_ACK,
        .CanIfCanTxPduIdCanId = 0x742, // DiagP2A
        .CanIfCanTxPduIdDlc = 8,
        .CanIfCanTxPduType = CANIF_PDU_TYPE_STATIC,
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadTxPduNotifyStatus = FALSE,
#endif
        .CanIfTxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfUserTxConfirmation = CanTp_TxConfirmation,
        .CanIfCanTxPduHthRef = &CanIfHthConfigData_CANIF_CHL_LS[0],
        .PduIdRef = NULL
    },
    {
        .CanIfTxPduId = CANNM_CHL_LS_TX,
        .CanIfCanTxPduIdCanId = 0x450, // Network
        .CanIfCanTxPduIdDlc = 8,
        .CanIfCanTxPduType = CANIF_PDU_TYPE_STATIC,
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadTxPduNotifyStatus = FALSE,
#endif
        .CanIfTxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfUserTxConfirmation = CanNm_TxConfirmation,
        .CanIfCanTxPduHthRef = &CanIfHthConfigData_CANIF_CHL_LS[0],
        .PduIdRef = NULL
    },  
    {
        .CanIfTxPduId = CANNM_CHL_HS_TX,
        .CanIfCanTxPduIdCanId = 0x451, // Network
        .CanIfCanTxPduIdDlc = 8,
        .CanIfCanTxPduType = CANIF_PDU_TYPE_STATIC,
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadTxPduNotifyStatus = FALSE,
#endif
        .CanIfTxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfUserTxConfirmation = CanNm_TxConfirmation,
        .CanIfCanTxPduHthRef = &CanIfHthConfigData_CANIF_CHL_HS[0],
        .PduIdRef = NULL
    },       
    %s
};\n\n"""%(cstr))
    
    ## Rx Pdu
    ## Tx PDU ID
    cstr =''
    for pdu in GLGet('RxPdu'):
        cstr += """
    {
        .CanIfCanRxPduId = PDUR_%s_RX,
        .CanIfCanRxPduCanId = %s,
        .CanIfCanRxPduDlc = 8,
#if ( CANIF_CANPDUID_READDATA_API == STD_ON )
        .CanIfReadRxPduData = TRUE,
#endif
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadRxPduNotifyStatus = TRUE,
#endif
        .CanIfRxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfRxUserType = CANIF_USER_TYPE_CAN_PDUR,
        .CanIfUserRxIndication = NULL,
        .CanIfCanRxPduHrhRef = &CanIfHrhConfigData_%s[0],
        .PduIdRef = NULL,
        .CanIfSoftwareFilterType = CANIF_SOFTFILTER_TYPE_MASK,
        .CanIfCanRxPduCanIdMask = 0x7FF
    },\n"""%(GAGet(pdu,'name'),GAGet(pdu,'id'),GAGet(pdu,'bus'),)
    fp.write("""
const CanIf_RxPduConfigType CanIfRxPduConfigData[] = 
{
    {
        .CanIfCanRxPduId = CANTP_DIAG_P2P_REQ,
        .CanIfCanRxPduCanId = 0x731, // DiagP2P
        .CanIfCanRxPduDlc = 8,
#if ( CANIF_CANPDUID_READDATA_API == STD_ON )
        .CanIfReadRxPduData = TRUE,
#endif
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadRxPduNotifyStatus = TRUE,
#endif
        .CanIfRxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfRxUserType = CANIF_USER_TYPE_CAN_TP,
        .CanIfUserRxIndication = NULL,
        .CanIfCanRxPduHrhRef = &CanIfHrhConfigData_CANIF_CHL_LS[0],
        .PduIdRef = NULL,
        .CanIfSoftwareFilterType = CANIF_SOFTFILTER_TYPE_MASK,
        .CanIfCanRxPduCanIdMask = 0x7FF
    },
    {
        .CanIfCanRxPduId = CANTP_DIAG_P2A_REQ,
        .CanIfCanRxPduCanId = 0x741, // DiagP2A
        .CanIfCanRxPduDlc = 8,
#if ( CANIF_CANPDUID_READDATA_API == STD_ON )
        .CanIfReadRxPduData = TRUE,
#endif
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadRxPduNotifyStatus = TRUE,
#endif
        .CanIfRxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfRxUserType = CANIF_USER_TYPE_CAN_TP,
        .CanIfUserRxIndication = NULL,
        .CanIfCanRxPduHrhRef = &CanIfHrhConfigData_CANIF_CHL_LS[0],
        .PduIdRef = NULL,
        .CanIfSoftwareFilterType = CANIF_SOFTFILTER_TYPE_MASK,
        .CanIfCanRxPduCanIdMask = 0x7FF
    },
    {
        .CanIfCanRxPduId = CANNM_CHL_LS_RX,
        .CanIfCanRxPduCanId = 0x4FF, // DiagP2A
        .CanIfCanRxPduDlc = 8,
#if ( CANIF_CANPDUID_READDATA_API == STD_ON )
        .CanIfReadRxPduData = TRUE,
#endif
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadRxPduNotifyStatus = TRUE,
#endif
        .CanIfRxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfRxUserType = CANIF_USER_TYPE_CAN_NM,
        .CanIfUserRxIndication = NULL,
        .CanIfCanRxPduHrhRef = &CanIfHrhConfigData_CANIF_CHL_LS[0],
        .PduIdRef = NULL,
        .CanIfSoftwareFilterType = CANIF_SOFTFILTER_TYPE_MASK,
        .CanIfCanRxPduCanIdMask = 0x700  // Mask the range 0x400 ~ 0x4ff as Network Range
    },
    {
        .CanIfCanRxPduId = CANNM_CHL_HS_RX,
        .CanIfCanRxPduCanId = 0x4FF, // DiagP2A
        .CanIfCanRxPduDlc = 8,
#if ( CANIF_CANPDUID_READDATA_API == STD_ON )
        .CanIfReadRxPduData = TRUE,
#endif
#if ( CANIF_READTXPDU_NOTIFY_STATUS_API == STD_ON )
        .CanIfReadRxPduNotifyStatus = TRUE,
#endif
        .CanIfRxPduIdCanIdType = CANIF_CAN_ID_TYPE_11,
        .CanIfRxUserType = CANIF_USER_TYPE_CAN_NM,
        .CanIfUserRxIndication = NULL,
        .CanIfCanRxPduHrhRef = &CanIfHrhConfigData_CANIF_CHL_HS[0],
        .PduIdRef = NULL,
        .CanIfSoftwareFilterType = CANIF_SOFTFILTER_TYPE_MASK,
        .CanIfCanRxPduCanIdMask = 0x700  // Mask the range 0x400 ~ 0x4ff as Network Range
    },         
    %s
};

// This container contains the init parameters of the CAN
// Multiplicity 1..*
const CanIf_InitConfigType CanIfInitConfig =
{
    .CanIfConfigSet = 0, // Not used
    .CanIfNumberOfCanRxPduIds = sizeof(CanIfTxPduConfigData)/sizeof(CanIf_TxPduConfigType),
    .CanIfNumberOfCanTXPduIds = sizeof(CanIfRxPduConfigData)/sizeof(CanIf_RxPduConfigType),
    .CanIfNumberOfDynamicCanTXPduIds = 0, // Not used
    // Containers
    .CanIfHohConfigPtr = CanIfHohConfigData,
    .CanIfRxPduConfigPtr = CanIfRxPduConfigData,
    .CanIfTxPduConfigPtr = CanIfTxPduConfigData,
};
// This container includes all necessary configuration sub-containers
// according the CAN Interface configuration structure
const CanIf_ConfigType CanIf_Config =
{
    .ControllerConfig = CanIfControllerConfig,
    .DispatchConfig = &CanIfDispatchConfig,
    .InitConfig = &CanIfInitConfig,
    .TransceiverConfig = NULL, // Not used
    .Arc_ChannelToControllerMap = CanIf_Arc_ChannelToControllerMap,
    .Arc_ChannelDefaultConfIndex = CanIf_Arc_ChannelDefaultConfIndex,
};
    """%(cstr))
    fp.close() 