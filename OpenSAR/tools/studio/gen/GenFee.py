import sys,os
import xml.etree.ElementTree as ET

__all__ = ['GenFee']


__Header = \
"""/*
* Configuration of module: Fee
*
* Created by:   parai          
* Copyright:    (C)parai@foxmail.com  
*
* Configured for (MCU):    MinGW ...
*
* Module vendor:           ArcCore
* Generator version:       2.0.34
*
* Generated by easySAR Studio (https://github.com/parai/OpenSAR)
*/
"""

__dir = '.'
__root = None

def GenFee(wfxml):
    global __dir,__root
    __root = ET.parse(wfxml).getroot();
    __dir = os.path.dirname(wfxml)
    GenH()
    GenC()


def tInt(strnum):
    if(strnum.find('0x')!=-1 or strnum.find('0X')!=-1):
        return int(strnum,16)
    else:
        return int(strnum,10)
def GAGet(what,which):
    try:
        return what.attrib[which]
    except:
        if(which == 'BlockSize'):
            Size = 0
            for data in what.find('DataList'):
                if(data.attrib['type']=='uint32'):
                    Size += 4
                elif(data.attrib['type']=='uint16'):
                    Size += 2
                elif(data.attrib['type']=='uint8'):
                    Size += 1
                elif(data.attrib['type']=='uint32_n'):
                    Size += 4*tInt(data.attrib['size'])
                elif(data.attrib['type']=='uint16_n'):
                    Size += 2*tInt(data.attrib['size'])
                elif(data.attrib['type']=='uint8_n'):
                    Size += tInt(data.attrib['size'])
            return Size+4  # length for Crc16 or Crc32
        else:
            return None    
def GLGet(what,which = None):
    """ Gen Get List
        Get A Special List []
    """
    global __root
    try:
        return __root.find(what)
    except:   
        return None 
def GenH():
    global __dir
    fp = open('%s/Fee_Cfg.h'%(__dir),'w')
    fp.write(__Header) 
    fp.write("""
#ifndef FEE_CFG_H_
#define FEE_CFG_H_

#include "MemIf_Types.h"
#include "Fee_ConfigTypes.h"

#define FEE_DEV_ERROR_DETECT            STD_ON
#define FEE_VERSION_INFO_API            STD_ON
#define FEE_POLLING_MODE                STD_ON

#define FEE_INDEX                        (0xFE)
#define FEE_VIRTUAL_PAGE_SIZE            8
#define FEE_MAX_NUM_SETS                 1\n\n""") 
    Num = 1
    for block in GLGet('FeeBlockList'):
        fp.write('#define FEE_BLOCK_NUM_%-32s %s\n'%(GAGet(block,'name'),Num))
        Num += (GAGet(block,'BlockSize')+7)/8
    fp.write('\n#define FEE_NUM_OF_BLOCKS %s\n'%(len(GLGet('FeeBlockList'))))
    fp.write('#endif /*FEE_CFG_H_*/\n\n')
    fp.close()  
    
def GenC():
    global __dir
    # =========================  PduR_Cfg.h ==================
    fp = open('%s/Fee_Cfg.c'%(__dir),'w')
    fp.write(__Header)
    cstr = ''
    for block in GLGet('FeeBlockList'):
        cstr += """
    {    /* %s */
        .DeviceIndex = FEE_INDEX,
        .BlockNumber = FEE_BLOCK_NUM_%s,
        .BlockSize  =  %s,
        .ImmediateData = FALSE,
        .NumberOfWriteCycles = 0xFFFFFFFF
    },        
    """%(GAGet(block,'name'),GAGet(block,'name'),GAGet(block,'BlockSize'))
    fp.write("""
#include "Fee.h"
#include "NvM_Cbk.h"

const Fee_BlockConfigType BlockConfigList[] = {
%s
};
const Fee_ConfigType Fee_Config = {
    .General = {
        .NvmJobEndCallbackNotificationCallback = NULL,
        .NvmJobErrorCallbackNotificationCallback = NULL,
    },
    .BlockConfig = BlockConfigList,
};
    """%(cstr))
    fp.close() 
