import sys,os
import xml.etree.ElementTree as ET

__all__ = ['GenCanTp']

__Header = \
"""/*
* Configuration of module: CanTp
*
* Created by:   parai          
* Copyright:    (C)parai@foxmail.com  
*
* Configured for (MCU):    MinGW ...
*
* Module vendor:           ArcCore
* Generator version:       2.0.34
*
* Generated by easySAR Studio (https://github.com/parai/OpenSAR)
*/
"""


__dir = '.'
__root = None

def GenCanTp(wfxml):
    global __dir,__root
    __root = ET.parse(wfxml).getroot();
    __dir = os.path.dirname(wfxml)
    GenH()
    GenC()
def GenH():
    global __dir
    fp = open('%s/CanTp_Cfg.h'%(__dir),'w')
    fp.write(__Header)
    fp.write("""

#ifndef CANTP_CFG_H_
#define CANTP_CFG_H_

#include "CanTp_Types.h"

#define CANTP_MAIN_FUNCTION_PERIOD_TIME_MS    10  /* ms */
#define CANTP_CONVERT_MS_TO_MAIN_CYCLES(x)     ((x)/CANTP_MAIN_FUNCTION_PERIOD_TIME_MS)

#define CANTP_NSDU_CONFIG_LIST_SIZE     4
#define CANTP_NSDU_RUNTIME_LIST_SIZE     4
#define CANTP_RXID_LIST_SIZE             4

#define FRTP_CANCEL_TRANSMIT_REQUEST     STD_OFF
#define CANTP_VERSION_INFO_API STD_OFF   /**< Build version info API */
#if defined(USE_DET)
#define CANTP_DEV_ERROR_DETECT STD_ON
#else
#define CANTP_DEV_ERROR_DETECT STD_OFF
#endif

/* CanTp NSdu Id */
#define CANTP_DIAG_P2P_REQ        0
#define CANTP_DIAG_P2P_ACK        1
#define CANTP_DIAG_P2A_REQ        2
#define CANTP_DIAG_P2A_ACK        3

extern const CanTp_ConfigType CanTpConfig;
extern const CanTp_NSduType CanTpNSduConfigList[];
extern const CanTp_RxIdType CanTp_RxIdList[];

#endif

    """)

def GenC():
    global __dir
    fp = open('%s/CanTp_Cfg.c'%(__dir),'w')
    fp.write(__Header)
    fp.write("""

#include "CanTp.h"
//#if defined(USE_CANIF)
#include "CanIf.h"
//#endif
//#if defined(USE_PDUR)
#include "PduR.h"
//#endif

const CanTp_GeneralType CanTpGeneralConfig =
{
    .main_function_period =  10,
};

//NSa
const CanTp_NSaType CanTpNSaConfig =
{
    .CanTpNSa =  0,
};

const CanTp_NTaType CanTpNTaConfig =
{
    .CanTpNTa =  0,
};

const CanTp_NSduType CanTpNSduConfigList[] =
{
    {
        .direction =  ISO15765_RECEIVE,
        .listItemType =  CANTP_NOT_LAST_ENTRY,
        .configData.CanTpRxNSdu.CanTp_FcPduId =  CANTP_DIAG_P2P_REQ,
        .configData.CanTpRxNSdu.CanIf_FcPduId =  CANIF_DIAG_P2P_ACK,
        .configData.CanTpRxNSdu.PduR_PduId =  PDUR_DIAG_P2P_REQ,
        .configData.CanTpRxNSdu.CanTpAddressingFormant =  CANTP_STANDARD,
        .configData.CanTpRxNSdu.CanTpBs =  8,
        .configData.CanTpRxNSdu.CanTpNar =  100,
        .configData.CanTpRxNSdu.CanTpNbr =  100,
        .configData.CanTpRxNSdu.CanTpNcr =  100,
        .configData.CanTpRxNSdu.CanTpRxChannel =  CANTP_DIAG_P2P_REQ,
        .configData.CanTpRxNSdu.CanTpRxDI =  8,
        .configData.CanTpRxNSdu.CanTpRxPaddingActivation =  CANTP_OFF,
        .configData.CanTpRxNSdu.CanTpRxTaType =  CANTP_PHYSICAL,
        .configData.CanTpRxNSdu.CanTpWftMax =  5,
        .configData.CanTpRxNSdu.CanTpSTmin =  0,
        .configData.CanTpRxNSdu.CanTpNSa =  &CanTpNSaConfig,
        .configData.CanTpRxNSdu.CanTpNTa =  &CanTpNTaConfig,
    },
    {
        .direction =  IS015765_TRANSMIT,
        .listItemType =  CANTP_NOT_LAST_ENTRY,
        .configData.CanTpTxNSdu.CanTp_FcPduId =  CANTP_DIAG_P2P_ACK,
        .configData.CanTpTxNSdu.CanIf_PduId   =  CANIF_DIAG_P2P_ACK,
        .configData.CanTpTxNSdu.PduR_PduId =  PDUR_DIAG_P2P_ACK,
        .configData.CanTpTxNSdu.CanTpAddressingMode =  CANTP_STANDARD,
        .configData.CanTpTxNSdu.CanTpNas =  100,
        .configData.CanTpTxNSdu.CanTpNbs =  100,
        .configData.CanTpTxNSdu.CanTpNcs =  100,
        .configData.CanTpTxNSdu.CanTpTxChannel =  CANTP_DIAG_P2P_ACK,
        .configData.CanTpTxNSdu.CanTpTxDI =  8,
        .configData.CanTpTxNSdu.CanTpTxPaddingActivation =  CANTP_OFF,
        .configData.CanTpTxNSdu.CanTpTxTaType =  CANTP_PHYSICAL,
        .configData.CanTpTxNSdu.CanTpNSa =  &CanTpNSaConfig,
        .configData.CanTpTxNSdu.CanTpNTa =  &CanTpNTaConfig,
    },
    {
        .direction =  ISO15765_RECEIVE,
        .listItemType =  CANTP_NOT_LAST_ENTRY,
        .configData.CanTpRxNSdu.CanTp_FcPduId =  CANTP_DIAG_P2A_REQ,
        .configData.CanTpRxNSdu.CanIf_FcPduId =  CANIF_DIAG_P2A_ACK,
        .configData.CanTpRxNSdu.PduR_PduId =  PDUR_DIAG_P2A_REQ,
        .configData.CanTpRxNSdu.CanTpAddressingFormant =  CANTP_STANDARD,
        .configData.CanTpRxNSdu.CanTpBs =  4,
        .configData.CanTpRxNSdu.CanTpNar =  100,
        .configData.CanTpRxNSdu.CanTpNbr =  100,
        .configData.CanTpRxNSdu.CanTpNcr =  100,
        .configData.CanTpRxNSdu.CanTpRxChannel =  CANTP_DIAG_P2A_REQ,
        .configData.CanTpRxNSdu.CanTpRxDI =  8,
        .configData.CanTpRxNSdu.CanTpRxPaddingActivation =  CANTP_OFF,
        .configData.CanTpRxNSdu.CanTpRxTaType =  CANTP_PHYSICAL,
        .configData.CanTpRxNSdu.CanTpWftMax =  5,
        .configData.CanTpRxNSdu.CanTpSTmin =  0,
        .configData.CanTpRxNSdu.CanTpNSa =  &CanTpNSaConfig,
        .configData.CanTpRxNSdu.CanTpNTa =  &CanTpNTaConfig,
    },
    {
        .direction =  IS015765_TRANSMIT,
        .listItemType =  CANTP_END_OF_LIST,
        .configData.CanTpTxNSdu.CanTp_FcPduId =  CANTP_DIAG_P2A_ACK,
        .configData.CanTpTxNSdu.CanIf_PduId =  CANIF_DIAG_P2A_ACK,
        .configData.CanTpTxNSdu.PduR_PduId =  PDUR_DIAG_P2A_ACK,
        .configData.CanTpTxNSdu.CanTpAddressingMode =  CANTP_STANDARD,
        .configData.CanTpTxNSdu.CanTpNas =  100,
        .configData.CanTpTxNSdu.CanTpNbs =  100,
        .configData.CanTpTxNSdu.CanTpNcs =  100,
        .configData.CanTpTxNSdu.CanTpTxChannel =  CANTP_DIAG_P2A_ACK,
        .configData.CanTpTxNSdu.CanTpTxDI =  8,
        .configData.CanTpTxNSdu.CanTpTxPaddingActivation =  CANTP_OFF,
        .configData.CanTpTxNSdu.CanTpTxTaType =  CANTP_PHYSICAL,
        .configData.CanTpTxNSdu.CanTpNSa =  &CanTpNSaConfig,
        .configData.CanTpTxNSdu.CanTpNTa =  &CanTpNTaConfig,
    },
};

const CanTp_RxIdType CanTp_RxIdList[] = 
{
    //DIAG_P2P_REQ
    {
        .CanTpAddressingMode =  CANTP_STANDARD,
        .CanTpNSduIndex =  CANTP_DIAG_P2P_REQ,
        .CanTpReferringTxIndex =  CANTP_DIAG_P2P_ACK,
    },
    //DIAG_P2P_ACK
    {
        .CanTpAddressingMode =  CANTP_STANDARD,
        .CanTpNSduIndex =  CANTP_DIAG_P2P_ACK,
        .CanTpReferringTxIndex =  0xFFFF,
    },
    //DIAG_P2A_REQ
    {
        .CanTpAddressingMode =  CANTP_STANDARD,
        .CanTpNSduIndex =  CANTP_DIAG_P2A_REQ,
        .CanTpReferringTxIndex =  CANTP_DIAG_P2A_ACK,
    },
    //DIAG_P2A_ACK
    {
        .CanTpAddressingMode =  CANTP_STANDARD,
        .CanTpNSduIndex =  CANTP_DIAG_P2A_ACK,
        .CanTpReferringTxIndex =  0xFFFF,
    },
};

const CanTp_ConfigType CanTpConfig =
{
    .CanTpGeneral     =      &CanTpGeneralConfig,
    .CanTpNSduList =     CanTpNSduConfigList,
    .CanTpRxIdList =    CanTp_RxIdList
};

    
    """)