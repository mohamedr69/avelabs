import sys,os
import xml.etree.ElementTree as ET

__all__ = ['GenEa']


__Header = \
"""/*
* Configuration of module: Ea
*
* Created by:   parai          
* Copyright:    (C)parai@foxmail.com  
*
* Configured for (MCU):    MinGW ...
*
* Module vendor:           ArcCore
* Generator version:       2.0.34
*
* Generated by easySAR Studio (https://github.com/parai/OpenSAR)
*/
"""

__dir = '.'
__root = None

def GenEa(wfxml):
    global __dir,__root
    __root = ET.parse(wfxml).getroot();
    __dir = os.path.dirname(wfxml)
    GenH()
    GenC()


def tInt(strnum):
    if(strnum.find('0x')!=-1 or strnum.find('0X')!=-1):
        return int(strnum,16)
    else:
        return int(strnum,10)
def GAGet(what,which):
    try:
        return what.attrib[which]
    except:
        if(which == 'BlockSize'):
            Size = 0
            for data in what.find('DataList'):
                if(data.attrib['type']=='uint32'):
                    Size += 4
                elif(data.attrib['type']=='uint16'):
                    Size += 2
                elif(data.attrib['type']=='uint8'):
                    Size += 1
                elif(data.attrib['type']=='uint32_n'):
                    Size += 4*tInt(data.attrib['size'])
                elif(data.attrib['type']=='uint16_n'):
                    Size += 2*tInt(data.attrib['size'])
                elif(data.attrib['type']=='uint8_n'):
                    Size += tInt(data.attrib['size'])
            return Size+4  # length for Crc16 or Crc32
        else:
            return None    
def GLGet(what,which = None):
    """ Gen Get List
        Get A Special List []
    """
    global __root
    try:
        return __root.find(what)
    except:   
        return None 
def GenH():
    global __dir
    fp = open('%s/Ea_Cfg.h'%(__dir),'w')
    fp.write(__Header) 
    fp.write("""
#ifndef EA_CFG_H
#define EA_CFG_H

#include "MemIf_Types.h"
#define EA_DEV_ERROR_DETECT        STD_ON
#define EA_SET_MODE_SUPPORTED      STD_OFF
#define EA_VERSION_INFO_API        STD_OFF
/*The size in bytes to which logical blocks shall be aligned.*/
#define EA_VIRTUAL_PAGE_SIZE    8 /** @req EA075 */

#define EA_INDEX                         (0xEA)
/*
    ITEM NAME:        <Ea_BlockConfigType>
    SCOPE:            <Ea Module>
    DESCRIPTION:
        Configuration of block specific parameters for the EEPROM abstraction module.
*/
/*@req EA040
*/

typedef struct {
    /*@req EA116
    */
    /*Block identifier (handle). 0x0000 and 0xFFFF shall not be used for block numbers (see EA006).
    Range:    min = 2^NVM_DATA_SELECTION_BITS
            max = 0xFFFF -2^NVM_DATA_SELECTION_BITS
    Note:     Depending on the number of bits set aside for dataset selection several other block numbers shall
            also be left out to ease implementation.
    NVM_DATA_SELECTION_BITS = 4        So range: 0x10 ~ 0xFFEF*/
    uint16    EaBlockNumber;

    /*Size of a logical block in bytes.*/
    /*@req EA117
    */
    uint16    EaBlockSize;

    /*Marker for high priority data.
    true: Block contains immediate data.
    false: Block does not contain immediate data.*/
    /*@req EA118
    */
    boolean    EaImmediateData;

    /*Device index (handle). Range: 0 .. 254 (0xFF reserved for broadcast call to GetStatus function).
    Type:    Reference to EepGeneral item 'EepDriverIndex'
    dependency: This information is needed by the NVRAM manager respectively the Memory Abstraction
    Interface to address a certain logical block. It is listed in this specification to give a complete overview
    over all block related configuration parameters.*/
    /*@req EA115
    */
    uint8    EaDeviceIndex;

    /*indicates the end of the Ea Block List*/
    boolean EaBlockEOL;
}Ea_BlockConfigType;

/*
    ITEM NAME:        <Ea_GeneralType>
    SCOPE:            <Ea Module>
    DESCRIPTION:
        General configuration of the EEPROM abstraction module. This container lists block independent
        configuration parameters.
*/
typedef struct {
    /*Specifies the InstanceId of this module instance. If only one instance is present it shall have the Id 0.*/
    uint8    EaIndex;

    /*Mapped to the job end notification routine provided by the upper layer module (NvM_JobEndNotification).*/
    void (*EaNvmJobEndNotification)(void);

    /*Mapped to the job error notification routine provided by the upper layer module (NvM_JobErrorNotification). */
    void (*EaNvmJobErrorNotification)(void);
}Ea_GeneralType;

extern const Ea_GeneralType Ea_GeneralData;
extern const Ea_BlockConfigType Ea_BlockConfigData[];\n\n""") 
    Num = 1
    for block in GLGet('EaBlockList'):
        fp.write('#define EA_BLOCK_NUM_%-32s %s\n'%(GAGet(block,'name'),Num))
        Num += 1
    fp.write('\n#define EA_NUMBER_OF_BLOCKS %s\n\n'%(len(GLGet('EaBlockList'))))
    max_block_size = 0
    for block in GLGet('EaBlockList'):
        if(GAGet(block,'BlockSize')>max_block_size):
            max_block_size = GAGet(block,'BlockSize')
    fp.write('#define EA_MAX_BLOCK_SIZE %s\n\n'%(max_block_size))
    fp.write('#endif /*EA_CFG_H_*/\n\n')
    fp.close()  
    
def GenC():
    global __dir
    # =========================  PduR_Cfg.h ==================
    fp = open('%s/Ea_Lcfg.c'%(__dir),'w')
    fp.write(__Header)
    cstr = ''
    for block in GLGet('EaBlockList'):
        if(block == GLGet('EaBlockList')[len(GLGet('EaBlockList'))-1]):
            isEol = 'TRUE'
        else:
            isEol = 'FALSE'
        cstr += """
    {    /* %s */
        .EaBlockNumber = EA_BLOCK_NUM_%s,
        .EaBlockSize = %s,
        .EaImmediateData  =  FALSE,
        .EaDeviceIndex = EA_INDEX,
        .EaBlockEOL = %s
    },        
    """%(GAGet(block,'name'),GAGet(block,'name'),GAGet(block,'BlockSize'),isEol)
    fp.write("""
#include "Ea.h"
#include "NvM_Cbk.h"

const Ea_GeneralType Ea_GeneralData = {
    .EaIndex = EA_INDEX,
    .EaNvmJobEndNotification = NvM_JobEndNotification,
    .EaNvmJobErrorNotification = NvM_JobErrorNotification,
};

const Ea_BlockConfigType Ea_BlockConfigData[] =
{
%s
};
    """%(cstr))
    fp.close() 
